# frozen_string_literal: true

module Raif
  module Conversations
    class <%= class_name %> < Raif::ApplicationConversation
      # If you want to always include a certain set of model tools with this conversation type, 
      # uncomment this callback to populate the available_model_tools attribute with your desired model tools.
      # before_create -> { self.available_model_tools = ["Raif::ModelTools::Example"] }

      # Override the methods below to customize the system prompt for this conversation type. 
      # Raif::Conversation expects a JSON response with a message key from the model, so make sure your system prompt instructs the model to respond accordingly.
      # def system_prompt_intro
      #   Raif.config.conversation_system_prompt_intro
      # end

      # def build_system_prompt
      #   <<~PROMPT
      #     #{system_prompt_intro}
      #     #{system_prompt_language_preference}
      #   PROMPT
      # end

      # Override this method to set the initial message shown to the user.
      # def initial_chat_message
      #   I18n.t("#{self.class.name.underscore.gsub("/", ".")}.initial_chat_message")
      # end
    end
  end
end 